name: Publish NuGet Package

on:
  workflow_dispatch:
    inputs:
      prerelease:
        description: "Publish as prerelease (adds -prerelease suffix)"
        required: false
        default: false
        type: boolean
      version_suffix:
        description: "Version suffix (e.g., beta, alpha, rc)"
        required: false
        default: ""
        type: string

env:
  NUGET_PACKAGE_NAME: GenAI.Bridge

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    environment: production
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    permissions:
      contents: read
      packages: write
      deployments: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.x"

      - name: Get version info
        id: version
        run: |
          # Get the latest tag or use 0.1.0 as default
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.1.0")
          CURRENT_VERSION=${LATEST_TAG#v}

          # Parse version components
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}

          # Increment patch version
          NEW_PATCH=$((PATCH + 1))
          VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"

          echo "Current version: ${CURRENT_VERSION}"
          echo "New version: ${VERSION}"

          # Add prerelease suffix if requested
          if [ "${{ inputs.prerelease }}" == "true" ]; then
            if [ -n "${{ inputs.version_suffix }}" ]; then
              VERSION="${VERSION}-${{ inputs.version_suffix }}"
            else
              VERSION="${VERSION}-prerelease"
            fi
          fi

          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "package_version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Final version: ${VERSION}"

      - name: Create git tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "v${{ steps.version.outputs.version }}" -m "Release v${{ steps.version.outputs.version }}"
          git push origin "v${{ steps.version.outputs.version }}"

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore --configuration Release

      # There is an issue with integration tests in the current setup, so they are commented out.
      #      - name: Test
      #        run: dotnet test --no-build --verbosity normal --configuration Release

      - name: Pack NuGet package
        run: |
          dotnet pack GenAI.Bridge/GenAI.Bridge.csproj \
            --configuration Release \
            --no-build \
            --output ./nupkgs \
            -p:Version=${{ steps.version.outputs.package_version }}

      - name: List package contents
        run: ls -la ./nupkgs/

      - name: Publish to GitHub Packages
        run: |
          dotnet nuget push ./nupkgs/*.nupkg \
            --api-key ${{ secrets.GITHUB_TOKEN }} \
            --source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json \
            --skip-duplicate

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}
          release_name: ${{ inputs.prerelease == 'true' && 'Prerelease' || 'Release' }} v${{ steps.version.outputs.version }}
          draft: false
          prerelease: ${{ inputs.prerelease }}

      - name: Upload package to release
        if: success()
        run: |
          gh release upload v${{ steps.version.outputs.version }} ./nupkgs/*.nupkg \
            --repo ${{ github.repository }}

      - name: Notify deployment
        run: |
          echo "Package published successfully!"
          echo "Version: ${{ steps.version.outputs.package_version }}"
          echo "Prerelease: ${{ inputs.prerelease }}"
          if [ "${{ inputs.prerelease }}" == "true" ]; then
            echo "This is a prerelease version"
          fi
